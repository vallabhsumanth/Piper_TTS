# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import piper_pb2 as piper__pb2


class gwStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Synthesize = channel.unary_stream(
                '/piper.gw/Synthesize',
                request_serializer=piper__pb2.SynthesizeSpeechRequest.SerializeToString,
                response_deserializer=piper__pb2.SynthesizeSpeechResponse.FromString,
                )
        self.GetLanguages = channel.unary_unary(
                '/piper.gw/GetLanguages',
                request_serializer=piper__pb2.GetLanguagesRequest.SerializeToString,
                response_deserializer=piper__pb2.GetLanguagesResponse.FromString,
                )
        self.GetVoices = channel.unary_unary(
                '/piper.gw/GetVoices',
                request_serializer=piper__pb2.GetVoicesRequest.SerializeToString,
                response_deserializer=piper__pb2.GetVoicesResponse.FromString,
                )


class gwServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Synthesize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLanguages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVoices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_gwServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Synthesize': grpc.unary_stream_rpc_method_handler(
                    servicer.Synthesize,
                    request_deserializer=piper__pb2.SynthesizeSpeechRequest.FromString,
                    response_serializer=piper__pb2.SynthesizeSpeechResponse.SerializeToString,
            ),
            'GetLanguages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLanguages,
                    request_deserializer=piper__pb2.GetLanguagesRequest.FromString,
                    response_serializer=piper__pb2.GetLanguagesResponse.SerializeToString,
            ),
            'GetVoices': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVoices,
                    request_deserializer=piper__pb2.GetVoicesRequest.FromString,
                    response_serializer=piper__pb2.GetVoicesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'piper.gw', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class gw(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Synthesize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/piper.gw/Synthesize',
            piper__pb2.SynthesizeSpeechRequest.SerializeToString,
            piper__pb2.SynthesizeSpeechResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLanguages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piper.gw/GetLanguages',
            piper__pb2.GetLanguagesRequest.SerializeToString,
            piper__pb2.GetLanguagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVoices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/piper.gw/GetVoices',
            piper__pb2.GetVoicesRequest.SerializeToString,
            piper__pb2.GetVoicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
